# Generated from Expr.g by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,178,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
        9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,3,10,107,8,10,1,11,1,11,1,12,
        1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,
        1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,
        1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,5,26,148,8,26,
        10,26,12,26,151,9,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,5,29,160,
        8,29,10,29,12,29,163,9,29,1,29,1,29,1,30,4,30,168,8,30,11,30,12,
        30,169,1,30,1,30,1,31,4,31,175,8,31,11,31,12,31,176,0,0,32,1,1,3,
        2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,1,0,4,1,0,65,90,1,0,97,
        122,2,0,10,10,32,32,1,0,48,57,185,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,
        0,0,3,67,1,0,0,0,5,69,1,0,0,0,7,71,1,0,0,0,9,73,1,0,0,0,11,76,1,
        0,0,0,13,79,1,0,0,0,15,84,1,0,0,0,17,92,1,0,0,0,19,98,1,0,0,0,21,
        106,1,0,0,0,23,108,1,0,0,0,25,110,1,0,0,0,27,112,1,0,0,0,29,114,
        1,0,0,0,31,116,1,0,0,0,33,118,1,0,0,0,35,120,1,0,0,0,37,123,1,0,
        0,0,39,126,1,0,0,0,41,129,1,0,0,0,43,131,1,0,0,0,45,133,1,0,0,0,
        47,135,1,0,0,0,49,138,1,0,0,0,51,141,1,0,0,0,53,143,1,0,0,0,55,152,
        1,0,0,0,57,154,1,0,0,0,59,156,1,0,0,0,61,167,1,0,0,0,63,174,1,0,
        0,0,65,66,5,40,0,0,66,2,1,0,0,0,67,68,5,41,0,0,68,4,1,0,0,0,69,70,
        5,123,0,0,70,6,1,0,0,0,71,72,5,125,0,0,72,8,1,0,0,0,73,74,5,60,0,
        0,74,75,5,45,0,0,75,10,1,0,0,0,76,77,5,105,0,0,77,78,5,102,0,0,78,
        12,1,0,0,0,79,80,5,101,0,0,80,81,5,108,0,0,81,82,5,115,0,0,82,83,
        5,101,0,0,83,14,1,0,0,0,84,85,5,101,0,0,85,86,5,108,0,0,86,87,5,
        115,0,0,87,88,5,101,0,0,88,89,5,32,0,0,89,90,5,105,0,0,90,91,5,102,
        0,0,91,16,1,0,0,0,92,93,5,119,0,0,93,94,5,104,0,0,94,95,5,105,0,
        0,95,96,5,108,0,0,96,97,5,101,0,0,97,18,1,0,0,0,98,99,5,100,0,0,
        99,100,5,111,0,0,100,20,1,0,0,0,101,102,5,45,0,0,102,103,5,45,0,
        0,103,107,5,62,0,0,104,105,5,58,0,0,105,107,5,45,0,0,106,101,1,0,
        0,0,106,104,1,0,0,0,107,22,1,0,0,0,108,109,5,43,0,0,109,24,1,0,0,
        0,110,111,5,45,0,0,111,26,1,0,0,0,112,113,5,42,0,0,113,28,1,0,0,
        0,114,115,5,47,0,0,115,30,1,0,0,0,116,117,5,94,0,0,117,32,1,0,0,
        0,118,119,5,37,0,0,119,34,1,0,0,0,120,121,5,33,0,0,121,122,5,61,
        0,0,122,36,1,0,0,0,123,124,5,60,0,0,124,125,5,61,0,0,125,38,1,0,
        0,0,126,127,5,62,0,0,127,128,5,61,0,0,128,40,1,0,0,0,129,130,5,60,
        0,0,130,42,1,0,0,0,131,132,5,62,0,0,132,44,1,0,0,0,133,134,5,61,
        0,0,134,46,1,0,0,0,135,136,5,38,0,0,136,137,5,38,0,0,137,48,1,0,
        0,0,138,139,5,124,0,0,139,140,5,124,0,0,140,50,1,0,0,0,141,142,5,
        33,0,0,142,52,1,0,0,0,143,149,3,55,27,0,144,148,3,55,27,0,145,148,
        3,57,28,0,146,148,3,63,31,0,147,144,1,0,0,0,147,145,1,0,0,0,147,
        146,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,
        54,1,0,0,0,151,149,1,0,0,0,152,153,7,0,0,0,153,56,1,0,0,0,154,155,
        7,1,0,0,155,58,1,0,0,0,156,161,5,35,0,0,157,160,3,55,27,0,158,160,
        3,57,28,0,159,157,1,0,0,0,159,158,1,0,0,0,160,163,1,0,0,0,161,159,
        1,0,0,0,161,162,1,0,0,0,162,164,1,0,0,0,163,161,1,0,0,0,164,165,
        5,10,0,0,165,60,1,0,0,0,166,168,7,2,0,0,167,166,1,0,0,0,168,169,
        1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,171,1,0,0,0,171,172,
        6,30,0,0,172,62,1,0,0,0,173,175,7,3,0,0,174,173,1,0,0,0,175,176,
        1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,64,1,0,0,0,8,0,106,147,
        149,159,161,169,176,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    IMPLIES = 11
    SUM = 12
    SUB = 13
    PROD = 14
    DIV = 15
    EXP = 16
    MOD = 17
    NOTEQ = 18
    LESSEQ = 19
    GREATEREQ = 20
    LESS = 21
    GREATER = 22
    EQ = 23
    AND = 24
    OR = 25
    NOT = 26
    ID = 27
    MAJUS = 28
    MINUS = 29
    COMMENT = 30
    WS = 31
    NUM = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "'<-'", "'if'", "'else'", "'else if'", 
            "'while'", "'do'", "'+'", "'-'", "'*'", "'/'", "'^'", "'%'", 
            "'!='", "'<='", "'>='", "'<'", "'>'", "'='", "'&&'", "'||'", 
            "'!'" ]

    symbolicNames = [ "<INVALID>",
            "IMPLIES", "SUM", "SUB", "PROD", "DIV", "EXP", "MOD", "NOTEQ", 
            "LESSEQ", "GREATEREQ", "LESS", "GREATER", "EQ", "AND", "OR", 
            "NOT", "ID", "MAJUS", "MINUS", "COMMENT", "WS", "NUM" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "IMPLIES", "SUM", "SUB", "PROD", 
                  "DIV", "EXP", "MOD", "NOTEQ", "LESSEQ", "GREATEREQ", "LESS", 
                  "GREATER", "EQ", "AND", "OR", "NOT", "ID", "MAJUS", "MINUS", 
                  "COMMENT", "WS", "NUM" ]

    grammarFileName = "Expr.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


